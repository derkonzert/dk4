/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/emails": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emails.id"];
          created_at?: parameters["rowFilter.emails.created_at"];
          key?: parameters["rowFilter.emails.key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["emails"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** emails */
          emails?: definitions["emails"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emails.id"];
          created_at?: parameters["rowFilter.emails.created_at"];
          key?: parameters["rowFilter.emails.key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.emails.id"];
          created_at?: parameters["rowFilter.emails.created_at"];
          key?: parameters["rowFilter.emails.key"];
        };
        body: {
          /** emails */
          emails?: definitions["emails"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_list": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_list.id"];
          author?: parameters["rowFilter.event_list.author"];
          fromDate?: parameters["rowFilter.event_list.fromDate"];
          toDate?: parameters["rowFilter.event_list.toDate"];
          location?: parameters["rowFilter.event_list.location"];
          url?: parameters["rowFilter.event_list.url"];
          description?: parameters["rowFilter.event_list.description"];
          location_name?: parameters["rowFilter.event_list.location_name"];
          created_at?: parameters["rowFilter.event_list.created_at"];
          parent_event?: parameters["rowFilter.event_list.parent_event"];
          verified?: parameters["rowFilter.event_list.verified"];
          legacyId?: parameters["rowFilter.event_list.legacyId"];
          child_events?: parameters["rowFilter.event_list.child_events"];
          title?: parameters["rowFilter.event_list.title"];
          canceled?: parameters["rowFilter.event_list.canceled"];
          ticketPrice?: parameters["rowFilter.event_list.ticketPrice"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_list"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/event_updates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_updates.id"];
          event_id?: parameters["rowFilter.event_updates.event_id"];
          changes?: parameters["rowFilter.event_updates.changes"];
          created_at?: parameters["rowFilter.event_updates.created_at"];
          summary?: parameters["rowFilter.event_updates.summary"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_updates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_updates */
          event_updates?: definitions["event_updates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_updates.id"];
          event_id?: parameters["rowFilter.event_updates.event_id"];
          changes?: parameters["rowFilter.event_updates.changes"];
          created_at?: parameters["rowFilter.event_updates.created_at"];
          summary?: parameters["rowFilter.event_updates.summary"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_updates.id"];
          event_id?: parameters["rowFilter.event_updates.event_id"];
          changes?: parameters["rowFilter.event_updates.changes"];
          created_at?: parameters["rowFilter.event_updates.created_at"];
          summary?: parameters["rowFilter.event_updates.summary"];
        };
        body: {
          /** event_updates */
          event_updates?: definitions["event_updates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          fromDate?: parameters["rowFilter.events.fromDate"];
          bands?: parameters["rowFilter.events.bands"];
          toDate?: parameters["rowFilter.events.toDate"];
          location?: parameters["rowFilter.events.location"];
          author?: parameters["rowFilter.events.author"];
          created_at?: parameters["rowFilter.events.created_at"];
          description?: parameters["rowFilter.events.description"];
          title?: parameters["rowFilter.events.title"];
          parent_event?: parameters["rowFilter.events.parent_event"];
          url?: parameters["rowFilter.events.url"];
          ticketPrice?: parameters["rowFilter.events.ticketPrice"];
          verified?: parameters["rowFilter.events.verified"];
          legacyId?: parameters["rowFilter.events.legacyId"];
          canceled?: parameters["rowFilter.events.canceled"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          fromDate?: parameters["rowFilter.events.fromDate"];
          bands?: parameters["rowFilter.events.bands"];
          toDate?: parameters["rowFilter.events.toDate"];
          location?: parameters["rowFilter.events.location"];
          author?: parameters["rowFilter.events.author"];
          created_at?: parameters["rowFilter.events.created_at"];
          description?: parameters["rowFilter.events.description"];
          title?: parameters["rowFilter.events.title"];
          parent_event?: parameters["rowFilter.events.parent_event"];
          url?: parameters["rowFilter.events.url"];
          ticketPrice?: parameters["rowFilter.events.ticketPrice"];
          verified?: parameters["rowFilter.events.verified"];
          legacyId?: parameters["rowFilter.events.legacyId"];
          canceled?: parameters["rowFilter.events.canceled"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          fromDate?: parameters["rowFilter.events.fromDate"];
          bands?: parameters["rowFilter.events.bands"];
          toDate?: parameters["rowFilter.events.toDate"];
          location?: parameters["rowFilter.events.location"];
          author?: parameters["rowFilter.events.author"];
          created_at?: parameters["rowFilter.events.created_at"];
          description?: parameters["rowFilter.events.description"];
          title?: parameters["rowFilter.events.title"];
          parent_event?: parameters["rowFilter.events.parent_event"];
          url?: parameters["rowFilter.events.url"];
          ticketPrice?: parameters["rowFilter.events.ticketPrice"];
          verified?: parameters["rowFilter.events.verified"];
          legacyId?: parameters["rowFilter.events.legacyId"];
          canceled?: parameters["rowFilter.events.canceled"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/feedback": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          mood?: parameters["rowFilter.feedback.mood"];
          content?: parameters["rowFilter.feedback.content"];
          page?: parameters["rowFilter.feedback.page"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** feedback */
          feedback?: definitions["feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          mood?: parameters["rowFilter.feedback.mood"];
          content?: parameters["rowFilter.feedback.content"];
          page?: parameters["rowFilter.feedback.page"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.feedback.id"];
          mood?: parameters["rowFilter.feedback.mood"];
          content?: parameters["rowFilter.feedback.content"];
          page?: parameters["rowFilter.feedback.page"];
        };
        body: {
          /** feedback */
          feedback?: definitions["feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/likes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          profile_id?: parameters["rowFilter.likes.profile_id"];
          event_id?: parameters["rowFilter.likes.event_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["likes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** likes */
          likes?: definitions["likes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          profile_id?: parameters["rowFilter.likes.profile_id"];
          event_id?: parameters["rowFilter.likes.event_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          profile_id?: parameters["rowFilter.likes.profile_id"];
          event_id?: parameters["rowFilter.likes.event_id"];
        };
        body: {
          /** likes */
          likes?: definitions["likes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/locations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.locations.id"];
          name?: parameters["rowFilter.locations.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["locations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** locations */
          locations?: definitions["locations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.locations.id"];
          name?: parameters["rowFilter.locations.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.locations.id"];
          name?: parameters["rowFilter.locations.name"];
        };
        body: {
          /** locations */
          locations?: definitions["locations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          calendarToken?: parameters["rowFilter.profiles.calendarToken"];
          /** Send immediate updates to user */
          immediate_updates?: parameters["rowFilter.profiles.immediate_updates"];
          /** Send weekly summary to user */
          weekly_updates?: parameters["rowFilter.profiles.weekly_updates"];
          email?: parameters["rowFilter.profiles.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          calendarToken?: parameters["rowFilter.profiles.calendarToken"];
          /** Send immediate updates to user */
          immediate_updates?: parameters["rowFilter.profiles.immediate_updates"];
          /** Send weekly summary to user */
          weekly_updates?: parameters["rowFilter.profiles.weekly_updates"];
          email?: parameters["rowFilter.profiles.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          calendarToken?: parameters["rowFilter.profiles.calendarToken"];
          /** Send immediate updates to user */
          immediate_updates?: parameters["rowFilter.profiles.immediate_updates"];
          /** Send weekly summary to user */
          weekly_updates?: parameters["rowFilter.profiles.weekly_updates"];
          email?: parameters["rowFilter.profiles.email"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/role_permissions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["role_permissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/top_liked_week": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.top_liked_week.id"];
          title?: parameters["rowFilter.top_liked_week.title"];
          fromDate?: parameters["rowFilter.top_liked_week.fromDate"];
          likes_count?: parameters["rowFilter.top_liked_week.likes_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["top_liked_week"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/user_roles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/archive_event_stats": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/event_stats": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/unique_short_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/authorize": {
    post: {
      parameters: {
        body: {
          args: {
            requested_permission: string;
            user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/location_stats": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  emails: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at?: string;
    key: string;
  };
  event_list: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    author?: string;
    fromDate?: string;
    toDate?: string;
    /**
     * Note:
     * This is a Foreign Key to `locations.id`.<fk table='locations' column='id'/>
     */
    location?: string;
    url?: string;
    description?: string;
    location_name?: string;
    created_at?: string;
    /**
     * Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    parent_event?: string;
    verified?: boolean;
    legacyId?: string;
    child_events?: string;
    title?: string;
    canceled?: boolean;
    ticketPrice?: string;
  };
  event_updates: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: string;
    changes?: string;
    created_at?: string;
    summary: string;
  };
  events: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    fromDate?: string;
    bands?: unknown[];
    toDate?: string;
    /**
     * Note:
     * This is a Foreign Key to `locations.id`.<fk table='locations' column='id'/>
     */
    location?: string;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    author?: string;
    created_at: string;
    description?: string;
    title?: string;
    /**
     * Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    parent_event?: string;
    url?: string;
    ticketPrice?: string;
    verified: boolean;
    legacyId?: string;
    canceled?: boolean;
  };
  feedback: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    mood?: string;
    content?: string;
    page?: string;
  };
  likes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    profile_id?: string;
    /**
     * Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id?: string;
  };
  locations: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name: string;
  };
  profiles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    updated_at?: string;
    username?: string;
    avatar_url?: string;
    website?: string;
    calendarToken?: string;
    /** Send immediate updates to user */
    immediate_updates?: boolean;
    /** Send weekly summary to user */
    weekly_updates?: boolean;
    email: string;
  };
  /** Application permissions for each role. */
  role_permissions: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    role: "admin" | "editor";
    permission: "event.delete" | "event.update";
  };
  top_liked_week: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    title?: string;
    fromDate?: string;
    likes_count?: number;
  };
  /** Application roles for each user. */
  user_roles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    user_id: string;
    role: "admin" | "editor";
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** emails */
  "body.emails": definitions["emails"];
  "rowFilter.emails.id": string;
  "rowFilter.emails.created_at": string;
  "rowFilter.emails.key": string;
  /** event_list */
  "body.event_list": definitions["event_list"];
  "rowFilter.event_list.id": string;
  "rowFilter.event_list.author": string;
  "rowFilter.event_list.fromDate": string;
  "rowFilter.event_list.toDate": string;
  "rowFilter.event_list.location": string;
  "rowFilter.event_list.url": string;
  "rowFilter.event_list.description": string;
  "rowFilter.event_list.location_name": string;
  "rowFilter.event_list.created_at": string;
  "rowFilter.event_list.parent_event": string;
  "rowFilter.event_list.verified": string;
  "rowFilter.event_list.legacyId": string;
  "rowFilter.event_list.child_events": string;
  "rowFilter.event_list.title": string;
  "rowFilter.event_list.canceled": string;
  "rowFilter.event_list.ticketPrice": string;
  /** event_updates */
  "body.event_updates": definitions["event_updates"];
  "rowFilter.event_updates.id": string;
  "rowFilter.event_updates.event_id": string;
  "rowFilter.event_updates.changes": string;
  "rowFilter.event_updates.created_at": string;
  "rowFilter.event_updates.summary": string;
  /** events */
  "body.events": definitions["events"];
  "rowFilter.events.id": string;
  "rowFilter.events.fromDate": string;
  "rowFilter.events.bands": string;
  "rowFilter.events.toDate": string;
  "rowFilter.events.location": string;
  "rowFilter.events.author": string;
  "rowFilter.events.created_at": string;
  "rowFilter.events.description": string;
  "rowFilter.events.title": string;
  "rowFilter.events.parent_event": string;
  "rowFilter.events.url": string;
  "rowFilter.events.ticketPrice": string;
  "rowFilter.events.verified": string;
  "rowFilter.events.legacyId": string;
  "rowFilter.events.canceled": string;
  /** feedback */
  "body.feedback": definitions["feedback"];
  "rowFilter.feedback.id": string;
  "rowFilter.feedback.mood": string;
  "rowFilter.feedback.content": string;
  "rowFilter.feedback.page": string;
  /** likes */
  "body.likes": definitions["likes"];
  "rowFilter.likes.id": string;
  "rowFilter.likes.profile_id": string;
  "rowFilter.likes.event_id": string;
  /** locations */
  "body.locations": definitions["locations"];
  "rowFilter.locations.id": string;
  "rowFilter.locations.name": string;
  /** profiles */
  "body.profiles": definitions["profiles"];
  "rowFilter.profiles.id": string;
  "rowFilter.profiles.updated_at": string;
  "rowFilter.profiles.username": string;
  "rowFilter.profiles.avatar_url": string;
  "rowFilter.profiles.website": string;
  "rowFilter.profiles.calendarToken": string;
  /** Send immediate updates to user */
  "rowFilter.profiles.immediate_updates": string;
  /** Send weekly summary to user */
  "rowFilter.profiles.weekly_updates": string;
  "rowFilter.profiles.email": string;
  /** role_permissions */
  "body.role_permissions": definitions["role_permissions"];
  "rowFilter.role_permissions.id": string;
  "rowFilter.role_permissions.role": string;
  "rowFilter.role_permissions.permission": string;
  /** top_liked_week */
  "body.top_liked_week": definitions["top_liked_week"];
  "rowFilter.top_liked_week.id": string;
  "rowFilter.top_liked_week.title": string;
  "rowFilter.top_liked_week.fromDate": string;
  "rowFilter.top_liked_week.likes_count": string;
  /** user_roles */
  "body.user_roles": definitions["user_roles"];
  "rowFilter.user_roles.id": string;
  "rowFilter.user_roles.user_id": string;
  "rowFilter.user_roles.role": string;
}

export interface operations {}

export interface external {}
